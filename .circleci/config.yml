version: 2
jobs:
  build:
    machine: true
    working_directory: ~/.go_workspace/src/github.com/habitat-sh/habitat-operator
    environment:
      GKE_CLUSTER_NAME: operator-test
    steps:
      - checkout
      - run:
          name: Check for changes in documentation and examples
          command: ./hack/check-skippable-changes.sh
      - run:
          name: setup
          environment:
            K8S_VERSION: v1.10.0
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - run:
          name: code-gen script
          environment:
            CODEGEN_PKG: ../../../../src/k8s.io/code-generator
            CODEGEN_VERSION: kubernetes-1.10.0
            GOPATH: /home/circleci/.go_workspace
          command: |
            mkdir -p $CODEGEN_PKG
            git clone https://github.com/kubernetes/code-generator.git --branch $CODEGEN_VERSION $GOPATH/src/k8s.io/code-generator
            hack/verify-codegen.sh
      - run:
          name: unit tests
          command: make test
      - run:
          name: install google cloud sdk
          environment:
            GCLOUD_COMPUTE_ZONE: europe-west1-b
          command: |
            sudo apt-get install lsb-release
            CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install google-cloud-sdk

            # the GCLOUD_SERVICE_KEY environment variable is set in the web UI
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

            # setup SDK
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT_ID
            gcloud config set compute/zone $GCLOUD_COMPUTE_ZONE
      - run:
          name: boot cluster on gke
          environment:
            K8S_VERSION: 1.10.2-gke.3
          command: gcloud container clusters create --cluster-version=$K8S_VERSION --disk-size=20 $GKE_CLUSTER_NAME
      - run:
          name: create image
          command: make TAG=testing image
      - run:
          name: Configure docker to use gcloud to authenticate requests to Container Registry
          command: gcloud auth configure-docker
      - run:
          name: Tag the docker image
          command: docker tag habitat/habitat-operator:testing gcr.io/$GCLOUD_PROJECT_ID/habitat/habitat-operator:testing
      - run:
          name: Push the docker image
          command: docker push gcr.io/$GCLOUD_PROJECT_ID/habitat/habitat-operator:testing
      - run:
          name: waiting for kubernetes to be ready
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1
            done
      - run:
          name: Grant the user the ability to create authorization roles
          command: kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user $(gcloud config get-value account)
      - run:
          name: e2e tests
          command: make TESTIMAGE=habitat/habitat-operator:testing e2e
      - run:
          name: print habitat object logs
          command: kubectl logs -lhabitat-operator=true --tail=100
          when: on_fail
      - run:
          name: Delete image from Container Registry
          command: gcloud container images delete gcr.io/$GCLOUD_PROJECT_ID/habitat/habitat-operator:testing --force-delete-tags --quiet
          when: always
      - run:
          name: delete cluster on gke
          command: gcloud container clusters delete $GKE_CLUSTER_NAME --quiet
          when: always
      # NOTE: this relies on journalctl, which is not present on the version of
      # Ubuntu currently run by CircleCI
      # - run:
          # - command: minikube logs
          # - when: on_fail
